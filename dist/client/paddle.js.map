{"version":3,"sources":["../src/client/paddle.ts"],"names":[],"mappings":";;;;;;;;AAAA;;;;2EAI2E;AAC3E,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,GAAS,EAAE;IACvC,6EAA6E;IAC7E,gFAAgF;IAChF,MAAM,MAAM,GAAmB,QAAQ,CAAC,sBAAsB,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7E,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;IACzC,MAAM,gBAAgB,GAAG,YAAY,GAAG,CAAC,CAAC;IAC1C,IAAI,qBAAqB,GAAG,MAAM,CAAC,SAAS,CAAC;IAE7C,qEAAqE;IACrE,MAAM,KAAK,GAAG,CAAC,CAAC;IAEhB,uEAAuE;IACvE,oEAAoE;IACpE,IAAI,QAAwB,CAAC;IAC7B,IAAI,SAAiB,CAAC;IAEtB,0BAA0B;IAC1B,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,KAAK,CAAC,EAAE;QAC3C,sEAAsE;QACtE,4DAA4D;QAC5D,wBAAwB;QACxB,IAAI,CAAC,QAAQ,EAAE;YACb,QAAQ,KAAK,CAAC,IAAI,EAAE;gBAClB,KAAK,GAAG;oBACN,SAAS,GAAG,KAAK,CAAC;oBAClB,WAAW,EAAE,CAAC;oBACd,MAAM;gBACR,KAAK,GAAG;oBACN,SAAS,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;oBACvB,WAAW,EAAE,CAAC;oBACd,MAAM;aACT;SACF;IACH,CAAC,CAAC,CAAC;IAEH,wBAAwB;IACxB,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,KAAK,CAAC,EAAE;QACzC,QAAQ,KAAK,CAAC,IAAI,EAAE;YAClB,KAAK,GAAG,CAAC;YACT,KAAK,GAAG;gBACN,UAAU,EAAE,CAAC;gBACb,MAAM;SACT;IACH,CAAC,CAAC,CAAC;IAEH,mDAAmD;IACnD,MAAM,UAAU,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC;IACtC,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,MAAM,CAAC,cAAc,GAAG,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC;IACtF,UAAU,CAAC,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,EAAE;IACxB,0DAA0D;IAC1D,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC;IAE9C,gEAAgE;IAChE,SAAS,WAAW;QAClB,wBAAwB;QACxB,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC,UAAU,CAAC,qBAAqB,GAAG,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC;IACjF,CAAC;IAED,6DAA6D;IAC7D,SAAS,UAAU;QACjB,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxB,QAAQ,GAAG,SAAS,GAAG,SAAS,CAAC;IACnC,CAAC;IAED;;;OAGG;IACH,SAAS,UAAU,CAAC,cAAsB;QACxC,IAAI,cAAc,IAAI,CAAC,IAAI,CAAC,cAAc,GAAG,YAAY,CAAC,IAAI,QAAQ,CAAC,eAAe,CAAC,YAAY,EAAE;YACnG,qBAAqB,GAAG,cAAc,CAAC;YAEvC,6DAA6D;YAC7D,gDAAgD;YAChD,MAAM,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,EAAE,GAAG,qBAAqB,IAAI,CAAC,CAAC;SAC/D;IACH,CAAC;AAEH,CAAC,CAAA,CAAC,CAAC","file":"paddle.js","sourcesContent":["/**************************************************************************\r\n  Demo for controlling the paddle with cursor keys and touch\r\n  NOTE: This code has not been optimized for size or speed. It was written\r\n        with ease of understanding in mind.\r\n**************************************************************************/\r\nwindow.addEventListener('load', async () => {\r\n    // Get some information about the paddle. This information will never change.\r\n    // So it makes sense to get it only once to make the rest of the program faster.\r\n    const paddle = <HTMLDivElement>document.getElementsByClassName('paddle2')[0];\r\n    const paddleHeight = paddle.clientHeight;\r\n    const paddleHalfHeight = paddleHeight / 2;\r\n    let currentPaddlePosition = paddle.clientTop;\r\n  \r\n    // Controls the speed of the movement (number of pixels per interval)\r\n    const speed = 4;\r\n  \r\n    // Two helper variables that contain values during movement with cursor\r\n    // keys. If currently not movement is happening, they are undefined.\r\n    let interval: NodeJS.Timeout;\r\n    let direction: number;\r\n  \r\n    // Listen to keydown event\r\n    document.addEventListener('keydown', event => {\r\n      // We have to check whether a movement is already in progress. This is\r\n      // necessary because keydown events arrive often when key is\r\n      // continuously pressed.\r\n      if (!interval) {\r\n        switch (event.code) {\r\n          case 'w':\r\n            direction = speed;\r\n            startMoving();\r\n            break;\r\n          case 's':\r\n            direction = speed * -1;\r\n            startMoving();\r\n            break;\r\n        }\r\n      }\r\n    });\r\n  \r\n    // Listen to keyup event\r\n    document.addEventListener('keyup', event => {\r\n      switch (event.code) {\r\n        case 'w':\r\n        case 's':\r\n          stopMoving();\r\n          break;\r\n      }\r\n    });\r\n  \r\n    // Setup handler for touch displays (pan operation)\r\n    const hammertime = new Hammer(paddle);\r\n    hammertime.get('pan').set({ direction: Hammer.DIRECTION_DOWN | Hammer.DIRECTION_UP });\r\n    hammertime.on('pan', ev => \r\n      // Put center of paddle to the center of the user's finger\r\n      movePaddle(ev.center.y - paddleHalfHeight));\r\n  \r\n    /** Helper function that starts movement when keydown happens */\r\n    function startMoving() {\r\n      // Move paddle every 4ms\r\n      interval = setInterval(() => movePaddle(currentPaddlePosition + direction), 4);\r\n    }\r\n  \r\n    /** Helper function that stops movement when keyup happens */\r\n    function stopMoving() {\r\n      clearInterval(interval);\r\n      interval = direction = undefined;\r\n    }\r\n  \r\n    /**\r\n     * Helper function that moves the paddle to a given position\r\n     * @param targetPosition Target position. No movement is done if target position is invalid\r\n     */\r\n    function movePaddle(targetPosition: number): void {\r\n      if (targetPosition >= 0 && (targetPosition + paddleHeight) <= document.documentElement.clientHeight) {\r\n        currentPaddlePosition = targetPosition;\r\n  \r\n        // Note the 'px' at the end of the coordinates for CSS. Don't\r\n        // forget it. Without the 'px', it doesn't work.\r\n        paddle.style.setProperty('top', `${currentPaddlePosition}px`);\r\n      }\r\n    }\r\n    \r\n  });"]}